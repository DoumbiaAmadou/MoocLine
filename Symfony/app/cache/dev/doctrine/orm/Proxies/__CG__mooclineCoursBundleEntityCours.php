<?php

namespace Proxies\__CG__\moocline\CoursBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Cours extends \moocline\CoursBundle\Entity\Cours implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'nom', 'categorie', 'enseignant', 'presentation', 'chapitres', 'etudiants', 'feuilles', 'dateDebut', 'dateFin');
        }

        return array('__isInitialized__', 'id', 'nom', 'categorie', 'enseignant', 'presentation', 'chapitres', 'etudiants', 'feuilles', 'dateDebut', 'dateFin');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Cours $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', array($nom));

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', array());

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategorie($categorie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategorie', array($categorie));

        return parent::setCategorie($categorie);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategorie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategorie', array());

        return parent::getCategorie();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setPresentation($presentation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPresentation', array($presentation));

        return parent::setPresentation($presentation);
    }

    /**
     * {@inheritDoc}
     */
    public function getPresentation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPresentation', array());

        return parent::getPresentation();
    }

    /**
     * {@inheritDoc}
     */
    public function addChapitre(\moocline\CoursBundle\Entity\Chapitre $chapitre)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChapitre', array($chapitre));

        return parent::addChapitre($chapitre);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChapitre(\moocline\CoursBundle\Entity\Chapitre $chapitre)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChapitre', array($chapitre));

        return parent::removeChapitre($chapitre);
    }

    /**
     * {@inheritDoc}
     */
    public function getChapitres()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChapitres', array());

        return parent::getChapitres();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDebut($dateDebut)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDebut', array($dateDebut));

        return parent::setDateDebut($dateDebut);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDebut()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDebut', array());

        return parent::getDateDebut();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateFin($dateFin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateFin', array($dateFin));

        return parent::setDateFin($dateFin);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFin', array());

        return parent::getDateFin();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnseignant(\moocline\CompteBundle\Entity\User $enseignant = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnseignant', array($enseignant));

        return parent::setEnseignant($enseignant);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnseignant()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnseignant', array());

        return parent::getEnseignant();
    }

    /**
     * {@inheritDoc}
     */
    public function addEtudiant(\moocline\CompteBundle\Entity\User $etudiants)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEtudiant', array($etudiants));

        return parent::addEtudiant($etudiants);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEtudiant(\moocline\CompteBundle\Entity\User $etudiants)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEtudiant', array($etudiants));

        return parent::removeEtudiant($etudiants);
    }

    /**
     * {@inheritDoc}
     */
    public function getEtudiants()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEtudiants', array());

        return parent::getEtudiants();
    }

    /**
     * {@inheritDoc}
     */
    public function addFeuille(\moocline\ExoBundle\Entity\FeuilleEx $feuilles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFeuille', array($feuilles));

        return parent::addFeuille($feuilles);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFeuille(\moocline\ExoBundle\Entity\FeuilleEx $feuilles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFeuille', array($feuilles));

        return parent::removeFeuille($feuilles);
    }

    /**
     * {@inheritDoc}
     */
    public function getFeuilles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFeuilles', array());

        return parent::getFeuilles();
    }

}
